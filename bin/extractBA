#!/usr/bin/env python

import math
import time

import pickle

import cv2
import numpy as np
import rospy
from cv_bridge import CvBridge
from sensor_msgs.msg import CameraInfo, Image
import bumblebee.utils as butil
from bumblebee.motion import *
from front_end.algorithm import simulatedBA
import os 


import argparse
rospy.init_node('BAsimulation')
cvb=CvBridge()

# parser =argparse.ArgumentParser()
# parser.add_argument("root_dir",help="The absolute directory to the motion simulation directory",type=str)
# args,unknown=parser.parse_known_args()
root_dir="/media/ryan/EXTRA/output/Simulation"

cameraSettings=butil.getPickledObject(root_dir+"/camera.p")
landmarkSettings=butil.getPickledObject(root_dir+"/landmark.p")


for j in ["Medium"]:#,"Medium","Fast"]:
    for spdType in ["straight"]:#,"turn"]:
        simulationFiles=os.listdir(root_dir+"/"+j+"/"+spdType+"/Data")
        ####
        outDirectory=root_dir+"/"+j+"/"+spdType+"/BA"

        for hFile in simulationFiles:
            currentFileDir=root_dir+"/"+j+"/"+spdType+"/Data/"+hFile
            outDirectory=root_dir+"/"+j+"/"+spdType+"/BA"
            print("loading",currentFileDir)
            currentFile=butil.getPickledObject(currentFileDir)
            ##gen Ideal data
            print("IDEAL DATA")
            for pp in currentFile.OperatingCurves.keys():
                print(pp)
                extractor=simulatedBA(baseWindow=currentFile.idealWindow.getSubset(currentFile.OperatingCurves[pp]))
                print(extractor.getWindowRMS(),"before")
                print(extractor.extractMotion())
                print("ideal",getxPoseFormatted(currentFile.idealWindow.getPoseX(1)))
                print(getxPoseFormatted(extractor.getPoseX(1)))
                print("--")
            # extractor=simulatedBA(baseWindow=currentFile.idealWindow.getSubset(currentFile.OperatingCurves[]))
            # print(extractor.getWindowRMS())
            # extractor=simulatedBA(baseWindow=currentFile.idealWindow)
            # print(extractor.getWindowRMS())
            
            # for operatingLvL in currentFile.OperatingCurves.keys():
            #     print("idealLevel",operatingLvL)
            #     ideal=currentFile.getIdealInterFrameEdge(operatingLvL)
            #     currentWindow=simulatedWindow(cameraSettings,ideal)
            #     r,time=currentWindow.BAestimate()
            #     print("RMS:",r,"seconds:",time,currentWindow.count)
            #     print(currentFile.pose.getFormatted())
            #     print(currentWindow.getNPoseEdge(0).getFormatted())






                # extractDirectory=outDirectory+"/ideal/"+str(len(ideal.currentEdges)).zfill(5)
                # outFile=extractDirectory+"/"+hFile
                # if(not os.path.exists(extractDirectory)):
                #     os.makedirs(extractDirectory)
                # f=open(outFile,"w")
                # pickle.dump((currentWindow.getNPoseEdge(0),time,r),f)
                # f.close()        
                # print(outFile)
            # print("NOISY DATA")
            # for operatingLvL in sorted(currentFile.OperatingCurves.keys()):
            #     for noiseLvL in landmarkSettings["GaussianNoise"]:

            #         print("NOISY curve Level",operatingLvL,noiseLvL)
            #         noise=currentFile.getNoisyInterFrameEdge(operatingLvL,str(noiseLvL).replace(".","_"))
            #         currentWindow=simulatedWindow(cameraSettings,noise)
            #         r,time=currentWindow.BAestimate()
            #         print("RMS:",r,"seconds:",time)
            #         print(currentFile.pose.getFormatted())
            #         print(currentWindow.getNPoseEdge(0).getFormatted())
            #         extractDirectory=outDirectory+"/noise/"+str(len(noise.currentEdges)).zfill(5)+"/"+str(noiseLvL).replace(".","_")
            #         outFile=extractDirectory+"/"+hFile
            #         if(not os.path.exists(extractDirectory)):
            #             os.makedirs(extractDirectory)
            #         f=open(outFile,"w")
            #         pickle.dump((currentWindow.getNPoseEdge(0),time,r),f)
            #         f.close()        
            #         print(outFile)
            # for operatingLvL in sorted(currentFile.OperatingCurves.keys()):
            #     for outLvL in landmarkSettings["OutlierLevels"]:

            #         print("Outlier curve Level",operatingLvL,outLvL)
            #         outEdge=currentFile.getOutlierInterFrameEdge(operatingLvL,str(int(outLvL *100)))
            #         currentWindow=simulatedWindow(cameraSettings,outEdge)
            #         r,time=currentWindow.BAestimate()
            #         print("RMS:",r,"seconds:",time)
            #         print(currentFile.pose.getFormatted())
            #         print(currentWindow.getNPoseEdge(0).getFormatted())
            #         extractDirectory=outDirectory+"/outlier/"+str(len(outEdge.currentEdges)).zfill(5)+"/"+str(int(outLvL *100))
            #         outFile=extractDirectory+"/"+hFile
            #         if(not os.path.exists(extractDirectory)):
            #             os.makedirs(extractDirectory)
            #         f=open(outFile,"w")
            #         pickle.dump((currentWindow.getNPoseEdge(0),time,r),f)
            #         f.close()        
            #         print(outFile)
