#!/usr/bin/env python

import math
import time

import pickle

import cv2
import numpy as np
import rospy
from cv_bridge import CvBridge
from front_end.motion import *
from front_end.simulation import *
from sensor_msgs.msg import CameraInfo, Image
from tf.transformations import quaternion_from_euler, quaternion_matrix

import argparse 


parser =argparse.ArgumentParser()
parser.add_argument("--root_dir",default="/media/ryan/EXTRA/output/Simulation",type=str)
args,unknown=parser.parse_known_args()
d=simDirectory(args.root_dir)
c,m,n=d.getSettings()
K=c["Pl"][0:3,0:3]
f=open(args.root_dir+"/Nister.p", 'r')
NisterSettings=pickle.load(f)
f.close()

pclExtractor=pclExtract("/media/ryan/EXTRA/output/Simulation",NisterSettings)


ind=d.getIdealWorldDir()[0]

print(ind)

worldFilesSet=os.listdir(ind)
for Hpickle in worldFilesSet:
    print(ind+"/"+Hpickle)
    f=open(ind+"/"+Hpickle,"r")
    IdealData=pickle.load(f)
    f.close()
    print(getMotion(IdealData["Htransform"]),"Ideal")
    print(getMotion(IdealData["H"]),"Ideal2")
    outData=[]
    for curve in IdealData["Curves"]:
        currentPoints=[]
        previousPoints=[]
        currentLandmarks=[]
        previousLandmarks=[]
        for point in curve:
            currentPoints.append([IdealData["Points"][point]["Lb"][0,0],IdealData["Points"][point]["Lb"][1,0]])
            currentLandmarks.append(IdealData["Points"][point]["Xb"])
            previousPoints.append([IdealData["Points"][point]["La"][0,0],IdealData["Points"][point]["La"][1,0]])
            previousLandmarks.append(IdealData["Points"][point]["Xa"])
        r=pclExtractor.closedForm(currentLandmarks,previousLandmarks)
        print(getMotion(r))