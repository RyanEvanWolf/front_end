#!/usr/bin/env python


import rospy

import matplotlib.pyplot as plt

import matplotlib.style as sty

import os
import statistics
sty.use("seaborn")

from front_end.analysis import getTopic
import numpy as np




inFolder="/home/ryan/recording/i7/BRIEF"
bagFiles=["750.bag","1500.bag","3000.bag","5000.bag"]#,"jetson_5000.bag","jetson_7000.bag"]




processor=["i7","jetson"]
features=["BRIEF_16","BRIEF_64","SURF"]
colours=[(0,0.4,1,0.4),(0,1,0,0.4),(1,0,0,0.4)]
fig1,(ax1)=plt.subplots(1,1,squeeze=True)

ax1.set_xlabel("Descriptor and Matching Processing Time (ms)")
ax1.set_ylabel("Total Detections")

fig2,(ax2)=plt.subplots(1,1)

ax2.set_xlabel("Detection Processing Time (ms)")
ax2.set_ylabel("Total Detections")


for p in processor:

    for descriptor in range(len(features)):
        inDir="/home/ryan/recording/"+p+"/"+features[descriptor]
        files=os.listdir(inDir)
        for f in range(len(files)):
            print(inDir+"/"+files[f])
            data=getTopic(inDir+"/"+files[f],"/stereo/debug/detection")
            time=np.array(getTopic(inDir+"/"+files[f],"/stereo/time/matches"))
            #time2=np.array(getTopic(inDir+"/"+files[f],"/stereo/time/description"))
            #time3=time+time2
            if(f==0):
                ax1.scatter(np.array(time)*1000,data,s=6,color=colours[descriptor],label=p+"_"+features[descriptor])
                ax1.legend()
            else:
                ax1.scatter(np.array(time)*1000,data,s=6,color=colours[descriptor])

    for descriptor in range(len(features)):
        inDir="/home/ryan/recording/"+p+"/"+features[descriptor]
        files=os.listdir(inDir)
        for f in range(len(files)):
            print(inDir+"/"+files[f])
            data=getTopic(inDir+"/"+files[f],"/stereo/debug/detection")
            time=np.array(getTopic(inDir+"/"+files[f],"/stereo/time/detection"))
            #time2=np.array(getTopic(inDir+"/"+files[f],"/stereo/time/description"))
            #time3=time+time2
            if(f==0):
                ax2.scatter(np.array(time)*1000,data,s=6,color=colours[descriptor],label=p+"_"+features[descriptor])
                ax2.legend()
            else:
                ax2.scatter(np.array(time)*1000,data,s=6,color=colours[descriptor])



plt.show()

