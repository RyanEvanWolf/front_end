#!/usr/bin/env python

import math
import time

import pickle

import cv2
import numpy as np
import rospy
from cv_bridge import CvBridge
from front_end.motion import *
from front_end.simulation import *
from sensor_msgs.msg import CameraInfo, Image
from tf.transformations import quaternion_from_euler, quaternion_matrix

def createDir(newDir):
    if(not os.path.exists(newDir)):
        os.makedirs(newDir)

rospy.init_node('motionSimulation')
cvb=CvBridge()

kSettings=getCameraSettingsFromServer()
mSettings=MotionCategorySettings()
lSettings=getSimulatedLandmarkSettings()
#NisterSettings=genDefaultNisterSettings(kSettings)
rootDir="/media/ryan/EXTRA/output/Simulation"
createDir(rootDir)

f=open(rootDir+"/camera.p", 'wb')
pickle.dump(kSettings,f)
f.close()
f=open(rootDir+"/motion.p", 'wb')
pickle.dump(mSettings,f)
f.close()
f=open(rootDir+"/landmark.p", 'wb')
pickle.dump(lSettings,f)
f.close()

totalMotions=30
totalLandmarks=1500

for m in mSettings.keys():
    motionDir=rootDir+"/"+m+"/straight/Data" 
    createDir(motionDir)
    print("generating "+m+" @ "+motionDir)
    for j in range(0,totalMotions):
        filename=motionDir+"/"+str(j+1).zfill(4)+".p"
        simulationData={}
        ####generate homography
        simulationData["R"]=noisyRotations(mSettings[m]["RotationNoise"])
        simulationData["Tc"]=dominantTranslation(mSettings[m]["TranslationMean"],mSettings[m]["TranslationNoise"])
        simulationData["H"]=createHomog(simulationData["R"]["matrix"],
                                        simulationData["Tc"]["vector"])
        simulationData["Htransform"]=composeTransform(simulationData["R"]["matrix"],
                                        simulationData["Tc"]["vector"])
        simulationData["Points"]={}
        simulationData["OperatingCurves"]=[]
        ##gen Operating Levels and Indexes
        for land in range(0,totalLandmarks):
            PointID=str(land+1).zfill(4)
            simulationData["Points"][PointID]=simulatedLandmark(simulationData["Htransform"],kSettings,lSettings)
        ####
        ##generate outliers, generate selection curves
        for i in lSettings["operatingCurves"]:
            nFeatures=int(i*totalLandmarks)
            currentSamples=random.sample(sorted(simulationData["Points"].keys()),nFeatures)#range(0,totalLandmarks),nFeatures)
            outlierSelections=[]
            for j in lSettings["OutlierLevels"]:
                nOutliers=int(j*nFeatures)
                currentSampleOutliers=random.sample(sorted(currentSamples),nOutliers)#range(0,nFeatures),nOutliers)
                outlierSelections.append(currentSampleOutliers)
            simulationData["OperatingCurves"].append((currentSamples,outlierSelections))
        print(filename)
        f=open(filename,"wb")
        pickle.dump(simulationData,f)
        f.close()
