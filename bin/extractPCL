#!/usr/bin/env python

import math
import time

import pickle

import cv2
import numpy as np
import rospy
from cv_bridge import CvBridge
from front_end.motion import *
from front_end.simulation import *
from sensor_msgs.msg import CameraInfo, Image
from tf.transformations import quaternion_from_euler, quaternion_matrix
import bumblebee.utils as butil
import os 
import argparse
rospy.init_node('NisterSimulation')
cvb=CvBridge()

parser =argparse.ArgumentParser()
parser.add_argument("root_dir",help="The absolute directory to the motion simulation directory",type=str)
parser.add_argument("--type",help="The type of motion simulation, either straight or turn",
                    default="straight",type=str)
args,unknown=parser.parse_known_args()

cameraSettings=butil.getPickledObject(args.root_dir+"/camera.p")
landmarkSettings=butil.getPickledObject(args.root_dir+"/landmark.p")

ba=BAextractor(cameraSettings)


for j in ["Slow","Medium","Fast"]:

    simulationFiles=os.listdir(args.root_dir+"/"+j+"/"+args.type+"/Data")
    ####
    outDirectory=args.root_dir+"/"+j+"/"+args.type+"/PCL"

    NisterSettings=genDefaultNisterSettings(cameraSettings)

    pclExtractor=pclExtract("/media/ryan/EXTRA/output/Simulation",NisterSettings)

    ################
    ###slow simulation
    ################
    for hFile in simulationFiles:
        currentFileDir=args.root_dir+"/"+j+"/"+args.type+"/Data/"+hFile
        outDirectory=args.root_dir+"/"+j+"/"+args.type+"/PCL"
        currentFile=butil.getPickledObject(currentFileDir)
        ###gen Ideal data
        print("IDEAL DATA")
        for operatingLvL in sorted(currentFile.OperatingCurves.keys()):
            print("idealLevel",operatingLvL)
            ideal=currentFile.getIdealInterFrameEdge(operatingLvL)
            estimate=rigid_transform_3D(ideal.getCurrentX(),ideal.getPreviousX())
            print(getMotion(currentFile.motionEdge))
            print(getMotion(decomposeTransform(np.linalg.inv(estimate["H"]))))
            extractDirectory=outDirectory+"/ideal/"+str(len(ideal.currentEdges)).zfill(5)
            outFile=extractDirectory+"/"+hFile
            if(not os.path.exists(extractDirectory)):
                os.makedirs(extractDirectory)
            f=open(outFile,"w")
            pickle.dump(estimate["H"],f)
            f.close()        
            print(outFile)
        print("NOISY DATA")
        for operatingLvL in sorted(currentFile.OperatingCurves.keys()):
            for noiseLvL in landmarkSettings["GaussianNoise"]:

                print("NOISY curve Level",operatingLvL,noiseLvL)
                noise=currentFile.getNoisyInterFrameEdge(operatingLvL,str(noiseLvL).replace(".","_"))
                estimate=rigid_transform_3D(noise.getCurrentX(),noise.getPreviousX())
                print(getMotion(currentFile.motionEdge))
                print(getMotion(decomposeTransform(np.linalg.inv(estimate["H"]))))
                extractDirectory=outDirectory+"/noise/"+str(len(noise.currentEdges)).zfill(5)+"/"+str(noiseLvL).replace(".","_")
                outFile=extractDirectory+"/"+hFile
                if(not os.path.exists(extractDirectory)):
                    os.makedirs(extractDirectory)
                f=open(outFile,"w")
                pickle.dump(estimate["H"],f)
                f.close()        
                print(outFile)
        for operatingLvL in sorted(currentFile.OperatingCurves.keys()):
            for outLvL in landmarkSettings["OutlierLevels"]:

                print("Outlier curve Level",operatingLvL,outLvL)
                outEdge=currentFile.getOutlierInterFrameEdge(operatingLvL,str(int(outLvL *100)))
                estimate=rigid_transform_3D(outEdge.getCurrentX(),outEdge.getPreviousX())
                print(getMotion(currentFile.motionEdge))
                print(getMotion(decomposeTransform(np.linalg.inv(estimate["H"]))))
                extractDirectory=outDirectory+"/outlier/"+str(len(outEdge.currentEdges)).zfill(5)+"/"+str(int(outLvL *100))
                outFile=extractDirectory+"/"+hFile
                if(not os.path.exists(extractDirectory)):
                    os.makedirs(extractDirectory)
                f=open(outFile,"w")
                pickle.dump(estimate["H"],f)
                f.close()        
                print(outFile)



 
