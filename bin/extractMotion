#!/usr/bin/env python

import math
import time

import pickle

import cv2
import numpy as np
import rospy
from cv_bridge import CvBridge
from sensor_msgs.msg import CameraInfo, Image
import bumblebee.utils as butil
from bumblebee.motion import *
from dataset.simulation import simulatedDataFrame
from front_end.algorithm import simulatedRANSAC,simulatedBA
import os 
import msgpack
import msgpack_numpy as m
import matplotlib.pyplot as plt
import argparse
rospy.init_node('RANSACsimulation')
cvb=CvBridge()

parser =argparse.ArgumentParser()
parser.add_argument("--speeds",default="Slow,Medium,Fast",type=str)
parser.add_argument("--motionType",default="straight",type=str)
parser.add_argument("--extractMethods",default="PCL",type=str)
parser.add_argument("--ideal",default=1,type=int)
parser.add_argument("--outlier",default=1,type=int)
parser.add_argument("--gaussian",default=1,type=int)
args,unknown=parser.parse_known_args()
root_dir="/media/ryan/EXTRA/output/Simulation"

cameraSettings=butil.getPickledObject(root_dir+"/camera.p")
landmarkSettings=butil.getPickledObject(root_dir+"/landmark.p")

setSpeeds=args.speeds.split(",")
motionCategories=args.motionType.split(",")
for j in setSpeeds:#,"Medium","Fast"]:
    for spdType in motionCategories:#,"turn"]:
        simulationFiles=os.listdir(root_dir+"/"+j+"/"+spdType+"/Data")
        ####
        # outDirectory=root_dir+"/"+j+"/"+spdType+"/BA"
        for hFile in simulationFiles:
            currentFileDir=root_dir+"/"+j+"/"+spdType+"/Data/"+hFile
            print("loading",currentFileDir)
            #currentFile=butil.getPickledObject(currentFileDir)
            with open(currentFileDir) as data_file:
                data_loaded = msgpack.unpack(data_file)
                currentFile = simulatedDataFrame()
                currentFile.deserializeFrame(data_loaded)
            if("PCL" in args.extractMethods):
                outDirectory=root_dir+"/"+j+"/"+spdType+"/PCL"
                # if(args.ideal):
                #     print("IDEAL EXTRACTION PCL")
                #     for opCurveName in currentFile.OperatingCurves.keys():
                #         filename=outDirectory+"/ideal/"+opCurveName+"/"+hFile
                #         if(not os.path.isfile(filename)):

                #             extractor=simulatedRANSAC(baseWindow=currentFile.idealWindow.getSubset(
                #                                                 currentFile.OperatingCurves[opCurveName]))
                #             rms,time=extractor.extractMotion()
                #             print(rms,time)
                #             print("ideal",getxPoseFormatted(currentFile.idealWindow.getPoseX(1)))
                #             print(getxPoseFormatted(extractor.getPoseX(1)))
                #             print(len(extractor.inliers))
                #             print("--")
                #             #outData=[extractor.serializeWindow(),rms,time]
                #             butil.createDir(filename)
                #             #filename+="/"+hFile
                #             with open(filename, 'w') as outfile:
                #                 msgpack.pack(outData, outfile)
                if(args.gaussian):
                    print("Guassian EXTRACTION PCL")
                    for opCurveName in currentFile.OperatingCurves.keys():
                        for noise in currentFile.Gaussian.keys():
                            filename=outDirectory+"/gaussian/"+opCurveName+"/"+noise+"/"+hFile
                            if(not os.path.isfile(filename)):

                                print(currentFile.Gaussian[noise].getSubset(
                                                                currentFile.OperatingCurves[opCurveName]).getWindowRMS())
                                extractor=simulatedRANSAC(baseWindow=currentFile.Gaussian[noise].getSubset(
                                                                currentFile.OperatingCurves[opCurveName]))
                                rms,time=extractor.extractMotion()
                                print(opCurveName,noise)
                                print(rms,time)
                                print("NOISY",getxPoseFormatted(currentFile.idealWindow.getPoseX(1)))
                                print(getxPoseFormatted(extractor.getPoseX(1)))
                                print(len(extractor.inliers))
                                print("--")
                                outData=[extractor.serializeWindow(),rms,time]
                                #filename=outDirectory+"/gaussian/"+opCurveName+"/"+noise
                                butil.createDir(filename)
                                #filename+="/"+hFile
                                with open(filename, 'w') as outfile:
                                    msgpack.pack(outData, outfile)
                if(args.outlier):
                    print("Outlier EXTRACTION PCL")
                    for opCurveName in currentFile.OperatingCurves.keys():
                        for noise in currentFile.Outlier[opCurveName].keys():
                            filename=outDirectory+"/outlier/"+opCurveName+"/"+noise+"/"+hFile
                            if(not os.path.isfile(filename)):
                                extractor=simulatedRANSAC(baseWindow=currentFile.Outlier[opCurveName][noise]["data"])
                                rms,time=extractor.extractMotion()
                                print(opCurveName,noise)
                                print(rms,time)
                                print("ideal",getxPoseFormatted(currentFile.idealWindow.getPoseX(1)))
                                print(getxPoseFormatted(extractor.getPoseX(1)))
                                print(len(extractor.inliers))
                                print("--")
                                outData=[extractor.serializeWindow(),rms,time]
                                #filename=outDirectory+"/outlier/"+opCurveName+"/"+noise
                                butil.createDir(filename)
                                #filename+="/"+hFile
                                with open(filename, 'w') as outfile:
                                    msgpack.pack(outData, outfile)
              
            if("BA" in args.extractMethods):
                outDirectory=root_dir+"/"+j+"/"+spdType+"/BA"
                # if(args.ideal):
                #     print("IDEAL EXTRACTION BA")
                #     for opCurveName in currentFile.OperatingCurves.keys():
                #         filename=outDirectory+"/ideal/"+opCurveName+"/"+hFile
                #         if(not os.path.isfile(filename)):

                #             extractor=simulatedBA(baseWindow=currentFile.idealWindow.getSubset(
                #                                                 currentFile.OperatingCurves[opCurveName]))
                #             rms,time=extractor.extractMotion()
                #             print(rms,time)
                #             print("ideal",getxPoseFormatted(currentFile.idealWindow.getPoseX(1)))
                #             print(getxPoseFormatted(extractor.getPoseX(1)))
                #             print(len(extractor.inliers))
                #             print("--")
                #             outData=[extractor.serializeWindow(),rms,time]
                #             #filename=outDirectory+"/outlier/"+opCurveName+"/"+noise
                #             butil.createDir(filename)
                #             #filename+="/"+hFile
                #             with open(filename, 'w') as outfile:
                #                 msgpack.pack(outData, outfile)
                if(args.gaussian):
                    print("Guassian EXTRACTION BA")
                    for opCurveName in currentFile.OperatingCurves.keys():
                        for noise in currentFile.Gaussian.keys():
                            currentOutF=outDirectory+"/gaussian/"+opCurveName+"/"+noise
                            filename=currentOutF+"/"+hFile
                            if(not os.path.isfile(filename)):

                                print(currentFile.Gaussian[noise].getSubset(
                                                                currentFile.OperatingCurves[opCurveName]).getWindowRMS())
                                extractor=simulatedBA(baseWindow=currentFile.Gaussian[noise].getSubset(
                                                                currentFile.OperatingCurves[opCurveName]))
                                rms,time=extractor.extractMotion()
                                print(opCurveName,noise)
                                print(rms,time)
                                print("ideal",getxPoseFormatted(currentFile.idealWindow.getPoseX(1)))
                                print(getxPoseFormatted(extractor.getPoseX(1)))
                                print("--")

                                outData=[extractor.serializeWindow(),rms,time]
                                #filename=outDirectory+"/outlier/"+opCurveName+"/"+noise
                                butil.createDir(currentOutF)
                                #filename+="/"+hFile
                                with open(filename, 'w') as outfile:
                                    msgpack.pack(outData, outfile)
                            else:
                                print("Found:",filename )
                if(args.outlier):
                    print("Outlier EXTRACTION BA")
                    for opCurveName in currentFile.OperatingCurves.keys():
                        for noise in currentFile.Outlier[opCurveName].keys():
                            currentOutF=outDirectory+"/outlier/"+opCurveName+"/"+noise
                            filename=outDirectory+"/outlier/"+opCurveName+"/"+noise+"/"+hFile
                            if(not os.path.isfile(filename)):
                                extractor=simulatedBA(baseWindow=currentFile.Outlier[opCurveName][noise]["data"])
                                rms,time=extractor.extractMotion()
                                print(opCurveName,noise)
                                print(rms,time)
                                print("ideal",getxPoseFormatted(currentFile.idealWindow.getPoseX(1)))
                                print(getxPoseFormatted(extractor.getPoseX(1)))
                                print("--")

                                outData=[extractor.serializeWindow(),rms,time]
                                #filename=outDirectory+"/outlier/"+opCurveName+"/"+noise
                                butil.createDir(currentOutF)
                                #filename+="/"+hFile
                                with open(filename, 'w') as outfile:
                                    msgpack.pack(outData, outfile)                            















            # currentFileDir=root_dir+"/"+j+"/"+spdType+"/Data/"+hFile
            # outDirectory=root_dir+"/"+j+"/"+spdType+"/PCL"
            # print("loading",currentFileDir)
            # currentFile=butil.getPickledObject(currentFileDir)
            # ##gen Ideal data
            # print("")



            # print("OUTLIER DATA")
            # for pp in currentFile.OperatingCurves.keys():
            #     print(pp)
            #     print("outliers",len(currentFile.Outlier[pp]["20"]["Outliers"]))#,currentFile.Outlier[pp]["20"]["Outliers"])
            #     print("Inliers",len(currentFile.Outlier[pp]["20"]["Inliers"]))
            #     print(sorted(currentFile.Outlier[pp]["20"]["Inliers"]+currentFile.Outlier[pp]["20"]["Outliers"]))
            #     extractor=simulatedRANSAC(baseWindow=currentFile.Outlier[pp]["20"]["data"])
            #     extractor.inliers=currentFile.Outlier[pp]["20"]["Inliers"]
            #     extractor.outliers=currentFile.Outlier[pp]["20"]["Outliers"]
            #     testInl=currentFile.Outlier[pp]["20"]["data"].getSubset(sorted(currentFile.Outlier[pp]["20"]["Inliers"]))
            #     testout=currentFile.Outlier[pp]["20"]["data"].getSubset(sorted(currentFile.Outlier[pp]["20"]["Outliers"]))
            #     test=currentFile.Outlier[pp]["20"]["data"]

            #     rms,time=extractor.extractMotion()
            #     print(rms,time)
            #     print("ideal",getxPoseFormatted(currentFile.idealWindow.getPoseX(1)))
            #     print(getxPoseFormatted(extractor.getPoseX(1)))
            #     print(len(extractor.inliers))
            #     print("--")
           
                
                
                
            #     extractDirectory=outDirectory+"/outlier/"+str(pp).zfill(5)+"20/"#+str(int(outLvL *100))
            #     outFile=extractDirectory+"/"+hFile
            #     # if(not os.path.exists(extractDirectory)):
            #     #     os.makedirs(extractDirectory)
            #     # f=open(outFile,"w")
            #     # pickle.dump(estimate["H"],f)
            #     # f.close()        
            #     print(outFile)
                
                # extractDirectory=outDirectory+"/ideal/"+str(len(ideal.currentEdges)).zfill(5)
                # outFile=extractDirectory+"/"+hFile
                # if(not os.path.exists(extractDirectory)):
                #     os.makedirs(extractDirectory)
                # f=open(outFile,"w")
                # pickle.dump(estimate["H"],f)
                # f.close()        
                # print(outFile)
            # print("NOISY DATA")
            # for operatingLvL in sorted(currentFile.OperatingCurves.keys()):
            #     for noiseLvL in landmarkSettings["GaussianNoise"]:

            #         print("NOISY curve Level",operatingLvL,noiseLvL)
            #         noise=currentFile.getNoisyInterFrameEdge(operatingLvL,str(noiseLvL).replace(".","_"))
            #         estimate=rigid_transform_3D(noise.getCurrentX(),noise.getPreviousX())
            #         print(getMotion(currentFile.motionEdge))
            #         print(getMotion(decomposeTransform(np.linalg.inv(estimate["H"]))))
            #         extractDirectory=outDirectory+"/noise/"+str(len(noise.currentEdges)).zfill(5)+"/"+str(noiseLvL).replace(".","_")
            #         outFile=extractDirectory+"/"+hFile
            #         if(not os.path.exists(extractDirectory)):
            #             os.makedirs(extractDirectory)
            #         f=open(outFile,"w")
            #         pickle.dump(estimate["H"],f)
            #         f.close()        
            #         print(outFile)
            # print("**************************************")
            # for operatingLvL in [sorted(currentFile.OperatingCurves.keys())[0]]:
            #     print("IDEAl",currentFile.pose.getH())
            #     for outLvL in [0.2]:#landmarkSettings["OutlierLevels"]:
            #         print("Outlier curve Level",operatingLvL,outLvL)
            #         OUTLIER=currentFile.getOutlierInterFrameEdge(operatingLvL,str(int(outLvL *100)))
            #         ideal=currentFile.getIdealInterFrameEdge(operatingLvL)
                    
                    
            #         t=simulatedRansacWindow(cameraSettings,OUTLIER)

            #         debu=simulatedRansacWindow(cameraSettings,ideal)

            #         realOutlierIndexes=currentFile.OperatingCurves[operatingLvL][1][str(int(outLvL *100))]
            #         realInlierIndexes=list(set(range(t.getNlandmarks()))-set(realOutlierIndexes))
            #         print(t.getNlandmarks())
            #         print("inliers",realInlierIndexes)
            #         print("realOUtliers",realOutlierIndexes)
            #         print("-----")
            #         testPointsA=t.getX(realInlierIndexes).reshape((4,len(realInlierIndexes)),order='F')
            #         # print(testPointsA.shape)
            #         testMeasurements=t.M[4:8,realInlierIndexes] ##only second frame
            #         testPointsB=currentFile.pose.getH().dot(testPointsA)
                    
            #         testPointsB/=testPointsB[3,:]

            #         print(testPointsB[:,0:4])
            #         print(debu.getX(realInlierIndexes).reshape((4,len(realInlierIndexes)),order='F')[:,0:4])
            #         print("------best")
            #         testPointsA=debu.getX(realInlierIndexes).reshape((4,len(realInlierIndexes)),order='F')
            #         # print(testPointsA.shape)
            #         testMeasurements=debu.M[4:8,realInlierIndexes] ##only second frame
            #         testPointsB=currentFile.pose.getH().dot(testPointsA)
                    
            #         testPointsB/=testPointsB[3,:]
            #         print(testPointsB[:,0:4])
                    
            #         # predictionsBL=self.kSettings["Pl"].dot(testPointsB)
            #         # predictionsBL/=predictionsBL[2,:]
            #         # predictionsBR=self.kSettings["Pr"].dot(testPointsB)
            #         # predictionsBR/=predictionsBR[2,:]
                    
                    
            #         # setPredictions=np.vstack((predictionsBL[0:2,:],predictionsBR[0:2,:]))



            #         # diffVect=setPredictions-testMeasurements






            #         # fit,err,inlier=t.RANSACestimate()
            #         # print(fit,err,len(inlier))

            # #         print("Outlier curve Level",operatingLvL,outLvL)
            # #         outEdge=currentFile.getOutlierInterFrameEdge(operatingLvL,str(int(outLvL *100)))
            # #         estimate=rigid_transform_3D(outEdge.getCurrentX(),outEdge.getPreviousX())
            # #         print(getMotion(currentFile.motionEdge))
            # #         print(getMotion(decomposeTransform(np.linalg.inv(estimate["H"]))))
            # #         extractDirectory=outDirectory+"/outlier/"+str(len(outEdge.currentEdges)).zfill(5)+"/"+str(int(outLvL *100))
            # #         outFile=extractDirectory+"/"+hFile
            # #         if(not os.path.exists(extractDirectory)):
            # #             os.makedirs(extractDirectory)
            # #         f=open(outFile,"w")
            # #         pickle.dump(estimate["H"],f)
            # #         f.close()        
            # #         print(outFile)



 
