#!/usr/bin/env python
#####ros related imports
import rospy 
import cv2
import time
import copy
from front_end.utils import *
from front_end.srv import *
from front_end.msg import frameDetection,ProcTime,kPoint
from front_end.features import getDescriptor,detectorLookUpTable,descriptorLookUpTable,getDetector
from cv_bridge import CvBridge
from dataset.utils import getDetectorTable
import yaml



cvb=CvBridge()

detTable=getDetectorTable()
descTable=descriptorLookUpTable()
global imagesProcessed
imagesProcessed=0

def getStereoFeatures_fn(req):
    global imagesProcessed
    ####create Results
    lTime=ProcTime()
    lTime.label="lkp"
    rTime=ProcTime()
    rTime.label="rkp"
    ldTime=ProcTime()
    ldTime.label="ld"
    rdTime=ProcTime()
    rdTime.label="rd"

    leftImg=cvb.imgmsg_to_cv2(req.leftImg)
    rightImg=cvb.imgmsg_to_cv2(req.rightImg)
    # descr=getAllDescriptor_Attributes()
    print(req.detID,req.descrID)
    fullOutputMessage=getStereoFeaturesResponse()
    fullOutputMessage.latestFeatures.detID=req.detID
    fullOutputMessage.latestFeatures.descrID=req.descrID
    # ###reform into lists
    detector,success=getDetector(detTable[req.detID]["Name"],
                                     detTable[req.detID]["Param"])
    extractor,success2=getDescriptor(descTable[req.descrID]["Name"],
                                     descTable[req.descrID]["Param"])
    ###########Get Left Info
    startTime=time.time()
    leftKPTs=detector.detect(leftImg)
    lTime.seconds=time.time()-startTime
    startTime=time.time()
    newKP,Descr=extractor.compute(leftImg,leftKPTs)
    ldTime.seconds=time.time()-startTime
    print(len(leftKPTs),len(newKP))

    fullOutputMessage.latestFeatures.leftFeatures=packKP(newKP)
    fullOutputMessage.latestFeatures.leftDescr=cvb.cv2_to_imgmsg(Descr)    
    #########Get Right Info
    startTime=time.time()
    rightKPTs=detector.detect(rightImg)
    rTime.seconds=time.time()-startTime

    startTime=time.time()
    newKP,Descr=extractor.compute(rightImg,rightKPTs)
    rdTime.seconds=time.time()-startTime
    fullOutputMessage.latestFeatures.rightFeatures=packKP(newKP)
    fullOutputMessage.latestFeatures.rightDescr=cvb.cv2_to_imgmsg(Descr)

    ###############################
    startTime=time.time()
    rightKPTs=detector.detect(leftImg)
    rTime.seconds=time.time()-startTime

    fullOutputMessage.latestFeatures.proc.append(lTime)
    fullOutputMessage.latestFeatures.proc.append(ldTime)
    fullOutputMessage.latestFeatures.proc.append(rTime)
    fullOutputMessage.latestFeatures.proc.append(rdTime)
    imagesProcessed+=1
    print(imagesProcessed)
    print("---Description---"+str(imagesProcessed))
    return fullOutputMessage

def singleImageDetection_fn(req):
    global imagesProcessed
    leftImg=cvb.imgmsg_to_cv2(req.leftImg)
    rightImg=cvb.imgmsg_to_cv2(req.rightImg)
    ###update Detector
    processCount=0

    ltime=ProcTime()
    ltime.label="lKP"

    rtime=ProcTime()
    rtime.label="rKP"

    fullOutputMessage=singleImageDetectionResponse()
    for settingsIndex in req.detID:
        
        detector,success=getDetector(detTable[settingsIndex]["Name"],
                                     detTable[settingsIndex]["Param"])
        if(not success):
            print("NOT FOUND DETECTOR SETTING !!!")
        latestFrame=frameDetection()
        startTime=time.time()
        leftKPTs=detector.detect(leftImg)
        ltime.seconds=time.time()-startTime
        startTime=time.time()
        rightKPTs=detector.detect(rightImg)
        rtime.seconds=time.time()-startTime
        ##pack into frames
        lstat=getKPstats(leftKPTs)
        rstat=getKPstats(rightKPTs)
        latestFrame.l_xAvg=lstat["X"]["Avg"]
        latestFrame.l_yAvg=lstat["Y"]["Avg"]
        latestFrame.l_xStd=lstat["X"]["stdDev"]
        latestFrame.l_yStd=lstat["Y"]["stdDev"]
        latestFrame.nLeft=len(leftKPTs)

        latestFrame.r_xAvg=rstat["X"]["Avg"]
        latestFrame.r_yAvg=rstat["Y"]["Avg"]
        latestFrame.r_xStd=rstat["X"]["stdDev"]
        latestFrame.r_yStd=rstat["Y"]["stdDev"]
        latestFrame.nRight=len(rightKPTs)
        if(req.returnKP):
            kptCount=0
            for l in leftKPTs:
                kp=cv2ros_KP(l)
                kp.class_id=kptCount
                kptCount+=1
                latestFrame.leftFeatures.append(kp)
            kptCount=0
            for r in rightKPTs:
                kp=cv2ros_KP(r)
                kp.class_id=kptCount
                kptCount+=1
                latestFrame.rightFeatures.append(kp)
        latestFrame.processingTime.append(ltime)
        latestFrame.processingTime.append(rtime)
        latestFrame.detID=settingsIndex
        processCount+=1
        print(settingsIndex,detTable[settingsIndex]["Name"],latestFrame.nLeft,latestFrame.nRight)
        fullOutputMessage.outputFrames.append(latestFrame)
    print("-----",imagesProcessed)
    imagesProcessed+=1
    return fullOutputMessage

rospy.init_node("feature_node")
setServices=[]
s=rospy.Service("feature_node/singleImageDetection",singleImageDetection,singleImageDetection_fn)
s1=rospy.Service("feature_node/getStereoFeatures",getStereoFeatures,getStereoFeatures_fn)
rospy.spin()