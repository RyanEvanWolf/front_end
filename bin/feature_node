#!/usr/bin/env python
#####ros related imports
import rospy 
import cv2
import time
import copy
from front_end.utils import *
from front_end.srv import *
from front_end.msg import frameDetection,ProcTime,kPoint
from front_end.msg import Descriptors,frameDescription
from cv_bridge import CvBridge

cvb=CvBridge()

global imagesProcessed
imagesProcessed=0

def singleImageDescription_fn(req):
    global imagesProcessed

    leftImg=cvb.imgmsg_to_cv2(req.leftImg)
    rightImg=cvb.imgmsg_to_cv2(req.rightImg)
    descr=getAllDescriptor_Attributes()

    fullOutputMessage=singleImageDescriptionResponse()
    ###reform into lists

    lkp=[]
    lID=[]
    rkp=[]
    rID=[]

    for i in req.leftFeatures:
        lkp.append(ros2cv_KP(i))
        lID.append(i.class_id)
    for i in req.rightFeatures:
        rkp.append(ros2cv_KP(i))
        rID.append(i.class_id)
    originalLeft=len(lkp)
    originalRight=len(rkp)

    for descrIndex in range(0,len(descr)):
        print(descr[descrIndex])
        latestDescriptors=Descriptors()
        latestDescriptors.descriptID=descrIndex
        t=ProcTime()
        t.label="ld_d"
        success,extractor=getDescriptor(descr[descrIndex])
        startTime=time.time()
        newKP,Descr=extractor.compute(leftImg,lkp)
        t.seconds=time.time()-startTime
        ####create mask
        maskID=[]
        for i in newKP:
            maskID.append(i.class_id)
        missing=list(set(lID)-set(maskID))
        for i in missing:
            latestDescriptors.left_featureMask.append(int(i))
        latestDescriptors.proc.append(t)
        latestDescriptors.leftDescriptors=cvb.cv2_to_imgmsg(Descr)

        t.label="rd_d"
        startTime=time.time()
        newKP,Descr=extractor.compute(rightImg,rkp)
        t.seconds=time.time()-startTime
        ####create mask
        maskID=[]
        for i in newKP:
            maskID.append(i.class_id)
        missing=list(set(rID)-set(maskID))
        for i in missing:
            latestDescriptors.right_featureMask.append(int(i))
        latestDescriptors.proc.append(t)
        latestDescriptors.rightDescriptors=cvb.cv2_to_imgmsg(Descr)
        fullOutputMessage.results.append(latestDescriptors)

    print("---Description---"+str(imagesProcessed))
    return fullOutputMessage

def singleImageDetection_fn(req):
    global imagesProcessed
    leftImg=cvb.imgmsg_to_cv2(req.leftImg)
    rightImg=cvb.imgmsg_to_cv2(req.rightImg)
    ###update Detector

    success,detector=getDetector(req.detectorName)
    #success,descriptor=getDetector(req.descriptorName)
    processCount=0

    ltime=ProcTime()
    ltime.label="lKP"

    rtime=ProcTime()
    rtime.label="rKP"

    fullOutputMessage=singleImageDetectionResponse()
    for settingsIndex in req.det_attrib:
        updateDetector(req.detectorName,settingsIndex,detector)

        latestFrame=frameDetection()
        startTime=time.time()
        leftKPTs=detector.detect(leftImg)
        ltime.seconds=time.time()-startTime

        startTime=time.time()
        rightKPTs=detector.detect(rightImg)
        rtime.seconds=time.time()-startTime
        ###pack into frames
        lstat=getKPstats(leftKPTs)
        rstat=getKPstats(rightKPTs)
        latestFrame.l_xAvg=lstat["X"]["Avg"]
        latestFrame.l_yAvg=lstat["Y"]["Avg"]
        latestFrame.l_xStd=lstat["X"]["stdDev"]
        latestFrame.l_yStd=lstat["Y"]["stdDev"]
        latestFrame.nLeft=len(leftKPTs)

        latestFrame.r_xAvg=rstat["X"]["Avg"]
        latestFrame.r_yAvg=rstat["Y"]["Avg"]
        latestFrame.r_xStd=rstat["X"]["stdDev"]
        latestFrame.r_yStd=rstat["Y"]["stdDev"]
        latestFrame.nRight=len(rightKPTs)
        if(req.returnKP):
            kptCount=0
            for l in leftKPTs:
                kp=cv2ros_KP(l)
                kp.class_id=kptCount
                kptCount+=1
                latestFrame.leftFeatures.append(kp)
            kptCount=0
            for r in rightKPTs:
                kp=cv2ros_KP(r)
                kp.class_id=kptCount
                kptCount+=1
                latestFrame.rightFeatures.append(kp)
        latestFrame.processingTime.append(ltime)
        latestFrame.processingTime.append(rtime)
        processCount+=1

        fullOutputMessage.outputFrames.append(latestFrame)
    print("-----",imagesProcessed)
    imagesProcessed+=1
    return fullOutputMessage

if __name__ == '__main__':
    rospy.init_node("feature_node")
    setServices=[]
    s=rospy.Service("feature_node/singleImageDetection",singleImageDetection,singleImageDetection_fn)
    s1=rospy.Service("feature_node/singleImageDescription",singleImageDescription,singleImageDescription_fn)
    rospy.spin()